   public static async Task<string> GetFirstBlobContent(string containerName, string query)
        {
            // Create a BlobServiceClient object which will be used to create a container client
            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);

            //Create a unique name for the container
            //string containerName = "media";

            // Create the container and return a container client object
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(containerName);

            //List<BlobItem> blobItems = new List<BlobItem>();
            List<YoutubeDownloadedFileInfo> youtubeDownloadedFileInfos = new List<YoutubeDownloadedFileInfo>();

            if (!string.IsNullOrEmpty(query))
            {
                query = $"{query} AND @container = '{containerName}'";
                //blobServiceClient.FindBlobsByTagsAsync(query);
                await foreach (TaggedBlobItem item in blobServiceClient.FindBlobsByTagsAsync(query))
                {
                    // Get a reference to a blob
                    BlobClient blobClient = containerClient.GetBlobClient(item.BlobName);

                    var content = await blobClient.DownloadContentAsync();

                    var stringContent = content.Value.Content.ToString();

                    return stringContent;

                }
            }

            return null;
        }


 public virtual Azure.Pageable<TaggedBlobItem> FindBlobsByTags(string tagFilterSqlExpression, CancellationToken cancellationToken = default)
        {
            return blobServiceClient.FindBlobsByTags(tagFilterSqlExpression, cancellationToken);
        }

        public virtual Azure.AsyncPageable<TaggedBlobItem> FindBlobsByTagsAsync(string tagFilterSqlExpression, CancellationToken cancellationToken = default)
        {
            return blobServiceClient.FindBlobsByTagsAsync(tagFilterSqlExpression, cancellationToken);
        }


        public virtual Azure.Pageable<TaggedBlobItem> FindBlobsByTags(string blobContainerName, string tagFilterSqlExpression, CancellationToken cancellationToken = default)
        {
            var blobContainerClient = blobServiceClient.GetBlobContainerClient(blobContainerName);
            return blobContainerClient.FindBlobsByTags(tagFilterSqlExpression, cancellationToken);
        }


        public virtual Azure.AsyncPageable<TaggedBlobItem> FindBlobsByTagsAsync(string blobContainerName, string tagFilterSqlExpression, System.Threading.CancellationToken cancellationToken = default)
        {
            var blobContainerClient = blobServiceClient.GetBlobContainerClient(blobContainerName);
            return blobContainerClient.FindBlobsByTagsAsync(tagFilterSqlExpression, cancellationToken);
        }
